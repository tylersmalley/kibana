[{"/home/tyler/elastic/kibana/x-pack/plugins/observability/public/utils/test_helper.tsx":"1","/home/tyler/elastic/kibana/src/dev/bazel_workspace_status.js":"2","/home/tyler/elastic/kibana/packages/kbn-pm/src/commands/bootstrap.ts":"3"},{"size":2379,"mtime":1613590079106,"results":"4","hashOfConfig":"5"},{"size":2455,"mtime":1613603627851,"results":"6","hashOfConfig":"5"},{"size":4976,"mtime":1613694290103,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bl2n7x",{"filePath":"10","messages":"11","errorCount":3,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"12","messages":"13","errorCount":4,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"14"},"/home/tyler/elastic/kibana/x-pack/plugins/observability/public/utils/test_helper.tsx",[],"/home/tyler/elastic/kibana/src/dev/bazel_workspace_status.js",["15","16","17"],"/home/tyler/elastic/kibana/packages/kbn-pm/src/commands/bootstrap.ts",["18","19","20","21"],"/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { sep } from 'path';\nimport { linkProjectExecutables } from '../utils/link_project_executables';\nimport { log } from '../utils/log';\nimport { parallelizeBatches } from '../utils/parallelize';\nimport { getNonBazelProjectsOnly, topologicallyBatchProjects } from '../utils/projects';\nimport { Project } from '../utils/project';\nimport { ICommand } from './';\nimport { getAllChecksums } from '../utils/project_checksums';\nimport { BootstrapCacheFile } from '../utils/bootstrap_cache_file';\nimport { readYarnLock } from '../utils/yarn_lock';\nimport { validateDependencies } from '../utils/validate_dependencies';\nimport { installBazelTools, runBazel } from '../utils/bazel';\n\nexport const BootstrapCommand: ICommand = {\n  description: 'Install dependencies and crosslink projects',\n  name: 'bootstrap',\n\n  async run(projects, projectGraph, { options, kbn, rootPath }) {\n    const nonBazelProjectsOnly = await getNonBazelProjectsOnly(projects);\n    const batchedNonBazelProjects = topologicallyBatchProjects(nonBazelProjectsOnly, projectGraph);\n    const kibanaProjectPath = projects.get('kibana')?.path;\n\n    // Install bazel machinery tools if needed\n    await installBazelTools(rootPath);\n\n    // Install monorepo npm dependencies\n    for (const batch of batchedNonBazelProjects) {\n      for (const project of batch) {\n        const isExternalPlugin = project.path.includes(`${kibanaProjectPath}${sep}plugins`);\n\n        if (!project.hasDependencies()) {\n          continue;\n        }\n\n        if (project.isSinglePackageJsonProject || isExternalPlugin) {\n          await project.installDependencies();\n          continue;\n        }\n\n        if (!project.isEveryDependencyLocal() && !isExternalPlugin) {\n          throw new Error(\n            `[${project.name}] is not eligible to hold non local dependencies. Move the non local dependencies into the top level package.json.`\n          );\n        }\n      }\n    }\n\n    const yarnLock = await readYarnLock(kbn);\n\n    if (options.validate) {\n      await validateDependencies(kbn, yarnLock);\n    }\n\n    // Assure all kbn projects with bin defined scripts\n    // copy those scripts into the top level node_modules folder\n    await linkProjectExecutables(projects, projectGraph);\n\n    // Bootstrap process for Bazel packages\n    //\n    // NOTE: Bazel projects will be introduced incrementally\n    // And should begin from the ones with none dependencies forward.\n    // That way non bazel projects could depend on bazel projects but not the other way around\n    // That is only intended during the migration process while non Bazel projects are not removed at all.\n    await runBazel(['build', '//packages:build']);\n\n    // Bootstrap process for non Bazel packages\n    /**\n     * At the end of the bootstrapping process we call all `kbn:bootstrap` scripts\n     * in the list of non Bazel projects. We do this because some projects need to be\n     * transpiled before they can be used. Ideally we shouldn't do this unless we\n     * have to, as it will slow down the bootstrapping process.\n     */\n\n    if (options.cache) {\n      const checksums = await getAllChecksums(kbn, log, yarnLock);\n      const caches = new Map<Project, { file: BootstrapCacheFile; valid: boolean }>();\n      let cachedProjectCount = 0;\n  \n      for (const project of nonBazelProjectsOnly.values()) {\n        if (project.hasScript('kbn:bootstrap') && !project.isBazelPackage()) {\n          const file = new BootstrapCacheFile(kbn, project, checksums);\n          const valid = options.cache && file.isValid();\n  \n          if (valid) {\n            log.debug(`[${project.name}] cache up to date`);\n            cachedProjectCount += 1;\n          }\n  \n          caches.set(project, { file, valid });\n        }\n      }\n\n      if (cachedProjectCount > 0) {\n        log.success(`${cachedProjectCount} bootstrap builds are cached`);\n      }\n    }\n    \n    await parallelizeBatches(batchedNonBazelProjects, async (project) => {\n      if (options.cache) {\n        const cache = caches.get(project);\n        if (cache && !cache.valid) {\n          log.info(`[${project.name}] running [kbn:bootstrap] script`);\n          cache.file.delete();\n          await project.runScriptStreaming('kbn:bootstrap');\n          cache.file.write();\n        }\n      } else {\n        if (project.hasScript('kbn:bootstrap')) {\n          log.info(`[${project.name}] running [kbn:bootstrap] script`);\n          await project.runScriptStreaming('kbn:bootstrap');\n        }\n      }\n\n      log.success(`[${project.name}] bootstrap complete`);\n    });\n\n    log.info('For IDE TypeScript support run `node scripts/build_ts_refs`');\n  },\n};\n",{"ruleId":"22","severity":2,"message":"23","line":46,"column":35,"nodeType":"24","messageId":"25","endLine":46,"endColumn":37},{"ruleId":"22","severity":2,"message":"23","line":52,"column":35,"nodeType":"24","messageId":"25","endLine":52,"endColumn":37},{"ruleId":"22","severity":2,"message":"23","line":73,"column":32,"nodeType":"24","messageId":"25","endLine":73,"endColumn":34},{"ruleId":"26","severity":2,"message":"27","line":86,"column":1,"nodeType":null,"endLine":86,"endColumn":3,"fix":"28"},{"ruleId":"26","severity":2,"message":"27","line":91,"column":1,"nodeType":null,"endLine":91,"endColumn":3,"fix":"29"},{"ruleId":"26","severity":2,"message":"27","line":96,"column":1,"nodeType":null,"endLine":96,"endColumn":3,"fix":"30"},{"ruleId":"26","severity":2,"message":"31","line":105,"column":1,"nodeType":null,"endLine":105,"endColumn":5,"fix":"32"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","prettier/prettier","Delete `··`",{"range":"33","text":"34"},{"range":"35","text":"34"},{"range":"36","text":"34"},"Delete `····`",{"range":"37","text":"34"},[3613,3615],"",[3885,3887],[4021,4023],[4215,4219]]